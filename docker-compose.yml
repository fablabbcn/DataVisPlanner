version: '2.0'

services:

  # --- FRONT-END ---

  # Static homepage
  homepage:
    container_name: "DataVisPlanner-home"
    build:
      context: ./homepage
      dockerfile: Dockerfile-homepage
    ports:
      - 80:80
    env_file:
        - .env

  # Meteor
  # Data visualisations
  meteor:
    container_name: "DataVisPlanner-meteor"
    env_file:
        - .env
    build:
      context: ./meteor/app
      dockerfile: Dockerfile-meteor # Production
      # dockerfile: Dockerfile-meteor-dev # Development
    volumes:
      - .:/meteor/app/
    depends_on:
      - mongo
    links:
      - mongo
    ports:
      - 3000:3000



  # --- DATABASES ---

  # Mongo
  # Shared db between data visualisations and analyses
  mongo:
    container_name: "DataVisPlanner-mongo"
    image: mongo:latest
    hostname: mongodb
    volumes:
      - mongo:/data
    ports:
      - 27017:27017

  # Mongo UI admin
  mongoui:
    container_name: "DataVisPlanner-mongo-ui"
    image: mongoclient/mongoclient:latest
    hostname: mongoclient
    depends_on:
      - mongo
    volumes:
      - mongo:/data
    ports:
        - 3300:3000
    env_file:
        - .env

  # Redis
  redis:
    container_name: "DataVisPlanner-redis"
    image: redis:3.2.7

  # PostgreSQL
  postgres:
    container_name: "DataVisPlanner-postgres"
    hostname: postgres
    env_file:
        - .env
    image: postgres
    restart: always
    build:
      context: ./airflow
      dockerfile: Dockerfile-postgres
    ports:
        - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data

  # PostgreSQL UI admin
  postgresui:
      container_name: "DataVisPlanner-postgres-ui"
      image: fenglc/pgadmin4
      ports:
          - 5050:5050
      env_file:
          - .env
      links:
          - postgres
      depends_on:
        - postgres


  # --- DATA WORKFLOWS ---

  # Jupyter Notebook
  # For editing Jupyter Notebooks
  jupyter:
    container_name: "DataVisPlanner-jupyter"
    env_file:
        - .env
    build:
      context: ./airflow
      dockerfile: Dockerfile-jupyter
      args:
        - JUPYTER_PASSWORD=${JUPYTER_PASSWORD}
    depends_on:
      - webserver
    volumes_from:
      - webserver
    ports:
      - 8888:8888
    command: start-notebook.sh --no-browser

  # Cloud9
  # For editing Airflow DAGs
  cloud9:
    container_name: "DataVisPlanner-cloud9"
    image: agungf/cloud9-ide
    env_file:
        - .env
    depends_on:
      - webserver
    volumes_from:
      - webserver
    ports:
      - 8181:8181
      - 22

  # Airflow
  # Data analyses
  # Copied and modified from the submodule airflow

  webserver:
    container_name: "DataVisPlanner-airflow-webserver"
    build:
      context: ./airflow
      dockerfile: Dockerfile-airflow
    depends_on:
        - postgres
        - redis
        - mongo
    restart: always
    env_file:
        - airflow.env
    volumes:
        - airflow:/usr/local/airflow/dags
    links:
        - mongo
        - postgres
    ports:
        - 8080:8080
    command: webserver

  flower:
    container_name: "DataVisPlanner-airflow-flower"
    build:
      context: ./airflow
      dockerfile: Dockerfile-airflow
    restart: always
    depends_on:
        - postgres
        - redis
        - mongo
    env_file:
        - airflow.env
    ports:
        - 5555:5555
    links:
        - mongo
        - postgres
    command: flower

  scheduler:
    container_name: "DataVisPlanner-airflow-scheduler"
    build:
      context: ./airflow
      dockerfile: Dockerfile-airflow
    restart: always
    depends_on:
        - postgres
        - webserver
        - mongo
    volumes_from:
      - webserver
    env_file:
        - airflow.env
    links:
        - mongo
        - postgres
    command: scheduler

  worker:
    container_name: "DataVisPlanner-airflow-worker"
    build:
      context: ./airflow
      dockerfile: Dockerfile-airflow
    restart: always
    depends_on:
        - postgres
        - scheduler
        - mongo
    volumes_from:
      - webserver
    env_file:
        - airflow.env
    links:
        - mongo
        - postgres
    command: worker


  # --- MANAGEMENT ---

  # Portainer
  # For managing containers
  # https://github.com/portainer/portainer-compose
  portainer:
    container_name: "DataVisPlanner-portainer"
    image: portainer/portainer
    ports:
        - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  watchtower:
    image: centurylink/watchtower
    container_name: "DataVisPlanner-portainer-watchtower"
    command: --cleanup portainer-app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


volumes:
  mongo:
  postgres:
  redis:
  airflow:
